package stockData;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Hashtable;

import javax.print.attribute.Size2DSyntax;
import javax.sound.sampled.Line;

public class DataProcess {
	String cdir;    // path for storing the data file and outputs.
	String fileName;
	Hashtable content;
	ArrayList<String> indexArrayList;

	public DataProcess(String dir, String name) {
		// TODO Auto-generated constructor stub
		this.cdir = dir;
		this.fileName = name;
		this.indexArrayList = new ArrayList<String>(); //store the stock index
		this.content = constructHash(); // store the data 
		
	}

	/*
	 * BASIC IDEA:
	 * Using hashtable to construct the source data.(8 columns, 
	 * I have removed the useless information under Linux)
	 * 
	 * Store the stock index as the key for the hashtable.
	 * The element in the hashtable corresponding to each stock index is a 7-dimension ArrayList.
	 * For example, there are 120 records for stock 000001, then the length of the arrays should be 120.
	 * If the seven subarrays are not in the same length, the function will return error information 
	 * to remind you.
	 */
	public Hashtable constructHash() {
		this.content = new Hashtable();
			BufferedReader br = null;
			try {
				br = new BufferedReader(new InputStreamReader(new FileInputStream(this.cdir+this.fileName)));
			} catch (FileNotFoundException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
				String line=null;
				try {
					line = br.readLine();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				while (line != null) {
					String[] cont = line.split("\t");
					if(cont.length==8 && Double.parseDouble(cont[6])>0 && Double.parseDouble(cont[7]) >= 100 ){
						/*
						 * 用成交量和成交金额去除错误数据
						 */
						if (this.content.containsKey(cont[0]) == false) {
							this.indexArrayList.add(cont[0]);
							ArrayList arr = new ArrayList(); 
							for (int i = 0; i < 7; ++i) {
								ArrayList list = new ArrayList();
								list.add(cont[i + 1]);
								arr.add(list);
							}
							this.content.put(cont[0], arr);
						
					} else {
						ArrayList temp = (ArrayList) this.content.get(cont[0]);
						for (int i = 0; i < 7; ++i) {
							ArrayList sub = (ArrayList) temp.get(i);
							sub.add(cont[i + 1]);
							temp.set(i, sub);
						
						}
						this.content.remove(cont[0]);
						this.content.put(cont[0], temp);
					}
					try {
						line = br.readLine();
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
					else{
						try {
							line = br.readLine();
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
				}
					
			
		try {
			br.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println("Finish constructing hashtable!");
		return this.content;
	}
	
	/*
	 * get William Index
	 * 
	 * calculate all the features from 26th day on.
	 * 
	 * n1 in our case is 15 days, and n2 is 10. That means we use the data of the first 10 days.
	 */
	public ArrayList<String> getWilliamIndex(Integer n1, Integer n2){
		ArrayList<String> str = new ArrayList();

		for(String key:this.indexArrayList){
			ArrayList cont = (ArrayList) this.content.get(key);
			int len = ((ArrayList) cont.get(0)).size();
			for(int j=26;j<len;++j){
				Double max = 0.0;
				Double min = 0.0;
				for(int k=0;k<n2;++k){
					Double item = Double.parseDouble((String)(((ArrayList)cont.get(5)).get(j-n1+k)));
					/*
					 * cont.get(5) means to get the price list. 
					 */
					if(item > max)
						max = item;
					if(item < min)
						min = item;
				}
				Double current = Double.parseDouble((String)((ArrayList)cont.get(5)).get(j));
				Double williamIndex = (max - current) / (max - min);
				
				String tem = key +"\t"+ Integer.toString(j)+"\t";
				/*
				 * the following for loop is to add the source data.
				 */
				for(int m =0;m<7;++m){
					tem += (String)((ArrayList)cont.get(m)).get(j)+"\t";	
				}
				tem += Double.toString(williamIndex);
				str.add(tem);
			}
		}
		System.out.println("size of william is "+str.size());
		return str;
	}
	
	/*
	 * get RSV
	 * in our case n is 15 days.
	 * Return RSV, K, D, J
	 */
	public ArrayList<String> getRSVKDJ(Integer n){
		ArrayList<String> str = new ArrayList<String>();
		for(String key : this.indexArrayList){
			ArrayList cont = (ArrayList) this.content.get(key);
			int len = ((ArrayList) cont.get(0)).size();
			ArrayList kValue = new ArrayList();
			ArrayList dValue = new ArrayList();
			for(int j=26;j<len;++j){
				Double max = 0.0;
				Double min = 0.0;
				for(int k=0;k<n;++k){
					Double item = Double.parseDouble((String)((ArrayList)cont.get(5)).get(j-k));
					if(item > max)
						max = item;
					if(item < min)
						min = item;
				}
				Double current = Double.parseDouble((String)((ArrayList)cont.get(5)).get(j));
				Double RSV= (current - min) / (max - min) * 100;
				Double k_val = null, d_val = null, j_val = null;
				if(j>26){
					k_val = 2/3.0*(double)kValue.get(j-27)+1/3*RSV;
					d_val = 2/3.0*(double)dValue.get(j-27)+1/3*k_val;	
					j_val = 3*d_val + 2*k_val;
					kValue.add(k_val);
					dValue.add(d_val);
				}
				else{
					k_val = 2/3.0*50.0+1/3*RSV;
					d_val = 2/3.0*50.0+1/3*k_val;	
					j_val = 3*d_val + 2*k_val;
					kValue.add(k_val);
					dValue.add(d_val);
				}
				String tem = key +"\t"+ Integer.toString(j) +"\t"+ Double.toString(RSV)+"\t"+Double.toString(k_val)+"\t"+Double.toString(d_val)+"\t"+Double.toString(j_val);
				str.add(tem);
			}
		}
		System.out.println("size of kdj is "+str.size());
		return str;
	}
	
	
	/*
	 * get MACD 
	 * Return EMA12, EMA26, DIF, DEA, MACD
	 * 
	 */
	public ArrayList<String> getMACD(){
		ArrayList<String> str = new ArrayList<String>();
		for(String key:this.indexArrayList){
			ArrayList cont = (ArrayList) this.content.get(key);
			int len = ((ArrayList) cont.get(0)).size();
			ArrayList EMA12 = new ArrayList();
			ArrayList EMA26 = new ArrayList();
			ArrayList DEA = new ArrayList();
			for(int j=26;j<len;++j){
				Double current = Double.parseDouble((String)((ArrayList)cont.get(5)).get(j)); //price today
				Double ema12 = null, ema26 = null, dea = null;
				Double dif = null, macd = null; 
				if(j>26){
					ema12 = 2/13.0*current + 11/13.0*(double)EMA12.get(j-27);
					ema26 = 2/27.0*current + 25/27.0*(double)EMA26.get(j-27);
					dif = ema12 - ema26;
					dea = dif * 0.2 + (double) DEA.get(j-27) * 0.8;
					macd = 2 * (dif - dea);
					EMA12.add(ema12);
					EMA26.add(ema26);
					DEA.add(dea);
				}
				else{
					ema12 = 2/13.0*current;
					ema26 = 2/27.0*current;
					dif = ema12 - ema26;
					dea = dif * 0.2;
					macd = 2 * (dif - dea);
					EMA12.add(ema12);
					EMA26.add(ema26);
					DEA.add(dea);
				}
				String tem = key +"\t"+ Integer.toString(j) +"\t"+ Double.toString(ema12)+"\t"+Double.toString(ema26)+"\t"+Double.toString(dif)+"\t"+Double.toString(dea)+"\t"+Double.toString(macd);
				str.add(tem);
			}
		}	
		System.out.println("size of macd is "+str.size());
		return str;
	}
	
	/*
	 * getY
	 */
	public ArrayList<String> getY(int n, double percent){
		ArrayList<String> str = new ArrayList<String>();
		for(String key:this.indexArrayList){
			ArrayList cont = (ArrayList) this.content.get(key);
			int len = ((ArrayList) cont.get(0)).size();
			for(int j=26;j<len;++j){
				Double current = Double.parseDouble((String)((ArrayList)cont.get(5)).get(j)); //price today
				Double previous = Double.parseDouble((String)((ArrayList)cont.get(5)).get(j-n)); //price previous
				String y = "-1";
				if(current>previous*(1+percent))
					y = "1";
				else if (current<previous*(1-percent)) {
					y = "0";
				}
				String tem = y+"\t"+key +"\t"+ Integer.toString(j);
				str.add(tem);
			}
		}	
		System.out.println("size of y is "+str.size());
		return str;
	}
	
	
	public void getOutput() throws IOException{
		ArrayList<String> wiliam = getWilliamIndex(15,10);
		ArrayList<String> kdj = getRSVKDJ(15);
		ArrayList<String> macd = getMACD();
		ArrayList<String> yArrayList = getY(5,0.10);

	
		if (wiliam.size()==kdj.size() && kdj.size() == macd.size()) {
			File file = new File(this.cdir+"output_2012_5_0.10.txt");
	        BufferedWriter output = new BufferedWriter(new FileWriter(file));
	        output.write("Y\tStkcd\tIndex\tOpendata\tOpnprc\tHiprc\tLoprc\tClsprc\tDnshrtrd\tDnvaltrd\tWilliamIndex\tRSV\tK\tD\tJ\tEMA12\tEMA26\tDIF\tDEA\tMACD\n");
			/*
			 * ATTENTION: The Open data is in the output! Please remove it if necessary.
			 */
	        
	        for(int i=0;i<wiliam.size();++i){
				String res = null;
				String[] y1 = ((String) yArrayList.get(i)).split("\t");
				String[] w1 = ((String) wiliam.get(i)).split("\t");
				String[] k1 = ((String) kdj.get(i)).split("\t");
				String[] m1 = ((String) macd.get(i)).split("\t");
				if (!y1[0].equals("-1")) {
					String resw1 = "";
					for(int t=2;t<10;++t){
						resw1 += w1[t] +"\t";
					}
					String resk1 = "";
					for(int t=2;t<6;++t){
						resk1 += k1[t] +"\t";
					}
					String resm1 = "";
					for(int t=2;t<6;++t){
						resm1 += m1[t]+"\t";
					}
					resm1 += m1[6] + "\n";
					
					res = (String) yArrayList.get(i)+"\t"+resw1+resk1+resm1;
					output.write(res);
				
				} else {
					System.out.println("Removed record!");
				}
			}
			output.close();
		} else {
			System.out.println("The arrays are not in the same length!");
		}
	}
	
	public static void main(String[] args) throws IOException{
		DataProcess hash = new DataProcess("D:\\xinw\\","data_2012.txt");
		hash.getOutput();
		System.out.println("Finish!");
	
	}
}
