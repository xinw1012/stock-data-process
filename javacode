package stockData;

import java.awt.image.RescaleOp;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.math.BigInteger;
import java.security.PublicKey;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Hashtable;

import javax.print.attribute.Size2DSyntax;
import javax.sound.sampled.Line;

public class DataProcess {
	String cdir;    // path for storing the data file and outputs.
	String fileName;
	String referName;
	Hashtable content;
	ArrayList<String> indexArrayList;
	ArrayList<String> selectArrayList;

	public DataProcess(String dir, String name,String refer) throws IOException {
		// TODO Auto-generated constructor stub
		this.cdir = dir;
		this.fileName = name;
		this.referName = refer;
		this.indexArrayList = new ArrayList<String>(); //store the stock index
		this.content = constructHash(); // store the data 
		this.selectArrayList=referenceIndex();
	}

	/*
	 * BASIC IDEA:
	 * Using hashtable to construct the source data.(8 columns, 
	 * I have removed the useless information under Linux)
	 * 
	 * Store the stock index as the key for the hashtable.
	 * The element in the hashtable corresponding to each stock index is a 7-dimension ArrayList.
	 * For example, there are 120 records for stock 000001, then the length of the arrays should be 120.
	 * If the seven subarrays are not in the same length, the function will return error information 
	 * to remind you.
	 */
	public ArrayList<String> referenceIndex() throws IOException{
		ArrayList<String> ref = new ArrayList<String>();
		BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(this.cdir+this.referName)));
		String line = br.readLine();
		while(line!=null){
			ref.add(line);
			line = br.readLine();
		}
		br.close();
		return ref;
	}
	public Hashtable constructHash() {
		this.content = new Hashtable();
			BufferedReader br = null;
			try {
				br = new BufferedReader(new InputStreamReader(new FileInputStream(this.cdir+this.fileName)));
			} catch (FileNotFoundException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
				String line=null;
				try {
					line = br.readLine();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				while (line != null) {
					String[] cont = line.split("\t");
					if(cont.length==8 && Double.parseDouble(cont[6])>0 && Double.parseDouble(cont[7]) >= 100 ){
						/*
						 * 用成交量和成交金额去除错误数据
						 */
						if (this.content.containsKey(cont[0]) == false) {
							this.indexArrayList.add(cont[0]);
							ArrayList arr = new ArrayList(); 
							for (int i = 0; i < 7; ++i) {
								ArrayList list = new ArrayList();
								list.add(cont[i + 1]);
								arr.add(list);
							}
							this.content.put(cont[0], arr);
						
					} else {
						ArrayList temp = (ArrayList) this.content.get(cont[0]);
						for (int i = 0; i < 7; ++i) {
							ArrayList sub = (ArrayList) temp.get(i);
							sub.add(cont[i + 1]);
							temp.set(i, sub);
						
						}
						this.content.remove(cont[0]);
						this.content.put(cont[0], temp);
					}
					try {
						line = br.readLine();
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
					else{
						try {
							line = br.readLine();
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
				}
					
			
		try {
			br.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println("Finish constructing hashtable!");
		return this.content;
	}
	
	/*
	 * get William Index
	 * 
	 * calculate all the features from 26th day on.
	 * 
	 * n1 in our case is 15 days, and n2 is 10. That means we use the data of the first 10 days.
	 */
	public ArrayList<String> getWilliamIndex(Integer n){
		ArrayList<String> str = new ArrayList();

		for(String key:this.indexArrayList){
			if(this.selectArrayList.contains(key)){
			ArrayList cont = (ArrayList) this.content.get(key);
			int len = ((ArrayList) cont.get(0)).size();
			for(int j=26;j<len;++j){
				Double max = 0.0;
				Double min = 0.0;
				for(int k=0;k<n;++k){
					Double item = Double.parseDouble((String)(((ArrayList)cont.get(4)).get(j-k)));
					/*
					 * cont.get(4) means to get the price list. 
					 */
					if(item > max)
						max = item;
					if(item < min)
						min = item;
				}
				Double current = Double.parseDouble((String)((ArrayList)cont.get(4)).get(j));
				Double williamIndex = (max - current) / (max - min) * 100;	
				/*
				 * the following for loop is to add the source data.
				 */
				String tem = Double.toString(williamIndex);
				str.add(tem);
			}
			}
			else{
				System.out.println("Stock index not in the selected list!");
			}
		}
		/*
		for(int i=0;i<str.size();++i){
			Double temp = Double.parseDouble(str.get(i));
			temp -= 50;
			str.set(i, Double.toString(temp));
		}*/
		System.out.println("size of william is "+str.size());
		return str;
	}
	
	/*
	 * get RSV
	 * in our case n is 15 days.
	 * Return  K, D, J
	 */
	public ArrayList<String> getRSVKDJ(Integer n){
		ArrayList<String> str = new ArrayList<String>();
		for(String key : this.indexArrayList){
			if(this.selectArrayList.contains(key)){
			ArrayList cont = (ArrayList) this.content.get(key);
			int len = ((ArrayList) cont.get(0)).size();
			ArrayList kValue = new ArrayList();
			ArrayList dValue = new ArrayList();
			for(int j=26;j<len;++j){
				Double max = 0.0;
				Double min = 0.0;
				for(int k=0;k<n;++k){
					Double item = Double.parseDouble((String)((ArrayList)cont.get(4)).get(j-k));
					if(item > max)
						max = item;
					if(item < min)
						min = item;
				}
				Double current = Double.parseDouble((String)((ArrayList)cont.get(4)).get(j));
				Double RSV= (current - min) / (max - min) * 100;
				Double k_val = null, d_val = null, j_val = null;
				if(j>26){
					k_val = 2/3.0*(double)kValue.get(j-27)+1/3*RSV;
					d_val = 2/3.0*(double)dValue.get(j-27)+1/3*k_val;	
					j_val = 3*d_val - 2*k_val;
					kValue.add(k_val);
					dValue.add(d_val);
				}
				else{
					k_val = 2/3.0*50.0+1/3*RSV;
					d_val = 2/3.0*50.0+1/3*k_val;	
					j_val = 3*d_val - 2*k_val;
					kValue.add(k_val);
					dValue.add(d_val);
				}
				String tem =Double.toString(k_val)+"\t"+Double.toString(d_val)+"\t"+Double.toString(j_val);
				str.add(tem);
			}
		}
			else{
				System.out.println("Stock index not in the selected list!");
			}
		}
		/*
		for(int i=0;i<str.size();++i){
			String[] contStrings = str.get(i).split("\t");
			String resString = "";
			for(int j=0;j<3;++j){
				Double temp = Double.parseDouble(contStrings[j]);
				temp-=50;
				resString+=Double.toString(temp);
				if(j<2){
					resString+="\t";
				}
			}
			str.set(i, resString);
		}*/
		System.out.println("size of kdj is "+str.size());
		return str;
	}
	
	
	/*
	 * get MACD 
	 * Return EMA12, EMA26, DIF, DEA, MACD
	 * 
	 */
	public ArrayList<String> getMACD(Integer n1, Integer n2){
		ArrayList<String> str = new ArrayList<String>();
		for(String key:this.indexArrayList){
			if(this.selectArrayList.contains(key)){
			ArrayList cont = (ArrayList) this.content.get(key);
			int len = ((ArrayList) cont.get(0)).size();
			ArrayList EMA12 = new ArrayList();
			ArrayList EMA26 = new ArrayList();
			ArrayList DEA = new ArrayList();
			for(int j=26;j<len;++j){
				Double current = Double.parseDouble((String)((ArrayList)cont.get(4)).get(j)); //price today
				Double ema12 = null, ema26 = null, dea = null;
				Double dif = null, macd = null; 
				if(j>26){
					ema12 = 2.0/(n1+1)*current + (1-(2.0/(n1+1)))*(double)EMA12.get(j-27);
					ema26 = 2.0/(n2+1)*current + (1-(2.0/(n2+1)))*(double)EMA26.get(j-27);
					dif = ema12 - ema26;
					dea = dif * 0.2 + (double) DEA.get(j-27) * 0.8;
					macd = 2 * (dif - dea);
					EMA12.add(ema12);
					EMA26.add(ema26);
					DEA.add(dea);
				}
				else{
					ema12 = 2/13.0*current;
					ema26 = 2/27.0*current;
					dif = ema12 - ema26;
					dea = dif * 0.2;
					macd = 2 * (dif - dea);
					EMA12.add(ema12);
					EMA26.add(ema26);
					DEA.add(dea);
				}
				String tem =Double.toString(current)+"\t"+Double.toString(ema12)+"\t"+Double.toString(ema26)+"\t"+Double.toString(dif)+"\t"+Double.toString(dea)+"\t"+Double.toString(macd);
				str.add(tem);
			}
			}
			else{
				System.out.println("Stock index not in the selected list!");
			}
		}	
		System.out.println("size of macd is "+str.size());
		for(int i=0;i<str.size();++i){
			String[] contStrings = str.get(i).split("\t");
			String resString = "";
			for(int j=1;j<6;++j){
				Double temp = Double.parseDouble(contStrings[j]);
				temp = Math.log(temp/(Double.parseDouble(contStrings[0])));
				resString+=Double.toString(temp);
				if(j<5){
					resString+="\t";
				}
			}
			str.set(i, resString);
		}
		return str;
	}
	
	/*
	 * getY
	 */
	public ArrayList<String> getY(int n, double percent){
		ArrayList<String> str = new ArrayList<String>();
		for(String key:this.indexArrayList){
			if(this.selectArrayList.contains(key)){
			ArrayList cont = (ArrayList) this.content.get(key);
			int len = ((ArrayList) cont.get(0)).size();
			for(int j=26;j<len;++j){
				Double current = Double.parseDouble((String)((ArrayList)cont.get(4)).get(j)); //price today
				Double previous = Double.parseDouble((String)((ArrayList)cont.get(4)).get(j-n)); //price previous
				String y = "-1";
				if(current>previous*(1+percent))
					y = "1";
				else if (current<previous*(1-percent)) {
					y = "0";
				}
				String tem = y+"\t"+key +"\t"+ Integer.toString(j)+"\t";
				for(int m =4;m<=6;++m){
					Double currentDouble = Double.parseDouble((String)((ArrayList)cont.get(m)).get(j));
					Double previousDouble = Double.parseDouble((String)((ArrayList)cont.get(m)).get(j-1));
					tem +=Double.toString(Math.log(currentDouble/previousDouble));
					if(m<6){
						tem+="\t";
					}
				}
				str.add(tem);
			}
		}
			else{
				System.out.println("Stock index not in the selected list!");
			}
		}
		System.out.println("size of y is "+str.size());
		return str;
	}
	
	
	public String getOutput() throws IOException{
		ArrayList<String> wiliam1 = getWilliamIndex(5);
		ArrayList<String> wiliam2 = getWilliamIndex(14);
		ArrayList<String> wiliam3 = getWilliamIndex(20);
		ArrayList<String> kdj = getRSVKDJ(5);
		ArrayList<String> macd = getMACD(12,26);
		ArrayList<String> yArrayList = getY(5,0);
		String pathString = this.cdir+"output_2012_5_0_selected.txt";
		File file = new File(pathString);
        BufferedWriter output = new BufferedWriter(new FileWriter(file));
        //output.write("Y\tStkcd\tIndex\tOpendata\tOpnprc\tHiprc\tLoprc\tClsprc\tDnshrtrd\tDnvaltrd\tWilliamIndex\tRSV\tK\tD\tJ\tEMA12\tEMA26\tDIF\tDEA\tMACD\n");
		if (wiliam1.size()==kdj.size() && kdj.size() == macd.size()) {
	        for(int i=0;i<wiliam1.size();++i){
				String res = (String) yArrayList.get(i)+"\t"+(String) wiliam1.get(i)+"\t"+(String) wiliam2.get(i)+"\t"+(String) wiliam3.get(i)+"\t"+(String) kdj.get(i)+(String) macd.get(i)+"\n";
				String[] y1 = ((String) yArrayList.get(i)).split("\t");
				if (!y1[0].equals("-1")) {
					output.write(res);
				
				} else {
					System.out.println("Removed record!");
				}
			}
			output.close();
		} else {
			System.out.println("The arrays are not in the same length!");
		}
		return pathString;
	}
	
	
	public void getTotalOutput(String path) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(path)));
		String line = br.readLine();
		Hashtable hashtable = new Hashtable<>();
		ArrayList<String> Index = new ArrayList<>();
		while(line!=null){
			String[] contStrings = line.split("\t");
			if(!hashtable.containsKey(contStrings[1])){
				ArrayList<String> list = new ArrayList<>();
				String resString = "";
				for(int i=0;i<contStrings.length;++i){
					if(i!=1 && i!=2){
						resString+=contStrings[i];
						if(i==0){
							resString+=",";
						}
						else if(i<contStrings.length-1){
							resString+="\t";
						}
					}
				}
				list.add(resString);
				hashtable.put(contStrings[1], list);
				Index.add(contStrings[1]);
			}
			else{
				ArrayList<String> list = (ArrayList<String>) hashtable.get(contStrings[1]);
				String resString = "";
				for(int i=0;i<contStrings.length;++i){
					if(i!=1 && i!=2){
						resString+=contStrings[i];
						if(i==0){
							resString+=",";
						}
						else {
							
						if(i<contStrings.length-1){
							resString+="\t";
						}
						}
					}
				}
				list.add(resString);
				hashtable.remove(contStrings[1]);
				hashtable.put(contStrings[1], list);
			}
			line = br.readLine();
		}
		br.close();
		
		String pathString = this.cdir+"output_2012_total_selected.txt";
		File file = new File(pathString);
        BufferedWriter output = new BufferedWriter(new FileWriter(file));
		for(String key:Index){
			ArrayList<String> listStrings = (ArrayList<String>)hashtable.get(key);
			if(listStrings.size()>=15){
				for(int i=14;i<listStrings.size();++i){
					String[] strings = listStrings.get(i).split(",");
					String ret = strings[0]+"\t";
					for(int j=i-14;j<i-4;++j){
						String[] strs = listStrings.get(j).split(",");
						ret+=strs[1];
						if(j<i-5){
							ret+="\t";
						}
					}
					ret+="\n";
					output.write(ret);
				}	
			}
			else{
				System.out.println("records are not enough!");
			}
		}
		output.close();
	}
	
	public static void main(String[] args) throws IOException{
		DataProcess hash = new DataProcess("D:\\xinw\\","data_2012.txt","stockindex.txt");
		String filePath = hash.getOutput();
		hash.getTotalOutput(filePath);
		System.out.println("Finish!");
	}
}

